from django.utils.timezone import now
from dcim.models import Device, DeviceType
from extras.scripts import Script, StringVar
from extras.models import JournalEntry

class FTTPDiagnostics(Script):
    class Meta:
        name = "FTTP Diagnostics"
        description = "Create a diagnostic journal entry for an FTTP device based on model name"
        field_order = ['device_model']

    device_model = StringVar(
        description="Enter the FTTP device model name"
    )

    def run(self, data, commit):
        # Find devices matching the given model name
        try:
            device_type = DeviceType.objects.get(model__iexact=data['device_model'])
            devices = Device.objects.filter(device_type=device_type)

            if not devices.exists():
                self.log_failure(f"No devices found for model '{data['device_model']}'.")
                return
            
        except DeviceType.DoesNotExist:
            self.log_failure(f"Device model '{data['device_model']}' not found.")
            return

        self.log_info(f"Found {devices.count()} device(s) for model '{data['device_model']}'.")

        for device in devices:
            # Simulated diagnostics message
            diagnostic_results = f"Diagnostics run at {now().strftime('%Y-%m-%d %H:%M:%S')}: No issues detected."

            # Create a journal entry for each device
            journal_entry = JournalEntry(
                assigned_object=device,
                assigned_object_type=device.get_content_type(),
                created=now(),
                kind="info",
                comments=diagnostic_results
            )

            if commit:
                journal_entry.save()
                self.log_success(f"Journal entry added to device {device.name}")
            else:
                self.log_info(f"Dry run: Journal entry not saved for device {device.name}.")

        return f"Diagnostic entries created for {devices.count()} devices of model: {data['device_model']}"
